import pymongo
import json
from bson import ObjectId
import random

class MongoRandomSampler:
    def __init__(self):
        self.connection_string = "mongodb+srv://n21dccn078:ABC12345678@storerecommender.w9auorn.mongodb.net/"
        self.db_name = "store_recommender"
        self.client = None
        self.db = None
        
        # Danh s√°ch c√°c collections
        self.collections = [
            "alcoholic_beverages",
            "beverages", 
            "cakes",
            "candies",
            "cereals_&_grains",
            "cold_cuts:_sausages_&_ham",
            "dried_fruits",
            "fresh_fruits",
            "fresh_meat",
            "fruit_jam",
            "grains_&_staples",
            "ice_cream_&_cheese",
            "instant_foods",
            "seafood_&_fish_balls",
            "seasonings",
            "snacks",
            "vegetables",
            "yogurt"
        ]
    
    def connect(self):
        """K·∫øt n·ªëi v·ªõi MongoDB"""
        try:
            self.client = pymongo.MongoClient(self.connection_string)
            self.db = self.client[self.db_name]
            
            # Test connection
            self.client.admin.command('ping')
            print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi database: {self.db_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def get_random_documents(self, collection_name, limit=50):
        """L·∫•y random documents t·ª´ m·ªôt collection"""
        try:
            collection = self.db[collection_name]
            
            # ƒê·∫øm t·ªïng s·ªë documents
            total_count = collection.count_documents({})
            
            if total_count == 0:
                print(f"‚ö†Ô∏è  Collection {collection_name} kh√¥ng c√≥ d·ªØ li·ªáu")
                return []
            
            # S·ª≠ d·ª•ng $sample ƒë·ªÉ l·∫•y random documents
            # N·∫øu t·ªïng s·ªë √≠t h∆°n limit th√¨ l·∫•y t·∫•t c·∫£
            sample_size = min(limit, total_count)
            
            pipeline = [
                {"$sample": {"size": sample_size}},
                {"$project": {
                    "_id": 1,
                    "name": 1,
                    "name_en": 1, 
                    "category": 1,
                    "unit": 1,
                    "image": 1
                }}
            ]
            
            documents = list(collection.aggregate(pipeline))
            
            # Convert ObjectId to string
            for doc in documents:
                if '_id' in doc:
                    doc['_id'] = str(doc['_id'])
            
            print(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(documents)}/{total_count} documents t·ª´ {collection_name}")
            return documents
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ {collection_name}: {e}")
            return []
    
    def sample_all_collections(self, limit_per_collection=50):
        """L·∫•y random data t·ª´ t·∫•t c·∫£ collections"""
        if not self.connect():
            return None
        
        all_data = {}
        
        print(f"\nüìä B·∫Øt ƒë·∫ßu l·∫•y {limit_per_collection} documents t·ª´ m·ªói collection...")
        print("=" * 70)
        
        for collection_name in self.collections:
            print(f"\nüîÑ ƒêang x·ª≠ l√Ω collection: {collection_name}")
            
            documents = self.get_random_documents(collection_name, limit_per_collection)
            all_data[collection_name] = {
                "collection_name": collection_name,
                "total_documents": len(documents),
                "data": documents
            }
        
        return all_data
    
    def save_to_json(self, data, filename="random_data_sample.json"):
        """L∆∞u d·ªØ li·ªáu ra file JSON"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o file: {filename}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")
            return False
    
    def print_summary(self, data):
        """In t√≥m t·∫Øt d·ªØ li·ªáu"""
        print("\n" + "=" * 70)
        print("üìã T√ìM T·∫ÆT D·ªÆ LI·ªÜU")
        print("=" * 70)
        
        total_documents = 0
        for collection_name, collection_data in data.items():
            count = collection_data['total_documents']
            total_documents += count
            print(f"üìÅ {collection_name:25} : {count:3} documents")
        
        print("-" * 70)
        print(f"üìä T·ªïng c·ªông: {total_documents} documents t·ª´ {len(data)} collections")
        
        # Hi·ªÉn th·ªã sample data t·ª´ collection ƒë·∫ßu ti√™n
        if data:
            first_collection = list(data.keys())[0]
            first_data = data[first_collection]['data']
            if first_data:
                print(f"\nüîç Sample data t·ª´ collection '{first_collection}':")
                print("-" * 50)
                sample_doc = first_data[0]
                for key, value in sample_doc.items():
                    print(f"  {key}: {value}")
    
    def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.client:
            self.client.close()
            print("\nüîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")


def main():
    """H√†m main ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh"""
    sampler = MongoRandomSampler()
    
    try:
        # L·∫•y d·ªØ li·ªáu random
        data = sampler.sample_all_collections(limit_per_collection=50)
        
        if data:
            # In t√≥m t·∫Øt
            sampler.print_summary(data)
            
            # L∆∞u ra file JSON
            sampler.save_to_json(data)
                    
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu")
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Ch∆∞∆°ng tr√¨nh b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        sampler.close_connection()

if __name__ == "__main__":
    main()


# H√†m utility ƒë·ªÉ test connection ƒë∆°n gi·∫£n
def test_connection():
    """Test k·∫øt n·ªëi ƒë∆°n gi·∫£n"""
    sampler = MongoRandomSampler()
    if sampler.connect():
        print("üéâ Test connection th√†nh c√¥ng!")
        
        # List all collections
        collections = sampler.db.list_collection_names()
        print(f"üìÅ C√°c collections c√≥ s·∫µn: {collections}")
        
        sampler.close_connection()
        return True
    return False


# H√†m ƒë·ªÉ l·∫•y data t·ª´ m·ªôt collection c·ª• th·ªÉ
def get_single_collection_data(collection_name, limit=50):
    """L·∫•y data t·ª´ m·ªôt collection c·ª• th·ªÉ"""
    sampler = MongoRandomSampler()
    
    if sampler.connect():
        data = sampler.get_random_documents(collection_name, limit)
        sampler.close_connection()
        return data
    return []


# Example usage:
"""
# Ch·∫°y to√†n b·ªô
python mongodb_sampler.py

# Ho·∫∑c s·ª≠ d·ª•ng c√°c h√†m ri√™ng l·∫ª:
if __name__ == "__main__":
    # Test connection
    test_connection()
    
    # L·∫•y data t·ª´ m·ªôt collection
    fresh_fruits_data = get_single_collection_data("fresh_fruits", 10)
    print(fresh_fruits_data)
"""